plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'rhetorike'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	asciidoctorExt // (2) asciidoctor를 확장하는 asciidoctorExt 에 대한 종속성 구성을 선언한다.
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {

	//flyway
	implementation 'org.flywaydb:flyway-mysql'
	//email
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	//xml
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.1'

	//web client
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	//redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	//test lombok
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	//apache lang
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	//쿨에스엠에스
	implementation 'net.nurigo:sdk:4.2.7'
	//bean validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	//rest assured
	testImplementation 'io.rest-assured:rest-assured:5.1.1'
	//security-test
	testImplementation 'org.springframework.security:spring-security-test'
	//restdoc
	asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor" // (3) asciidoctorExt에 spring-restdocs-asciidoctor 의존성을 추가한다. build/generated-snippets 에 있는 .adoc 파일을 읽어들여 .html 파일로 만들어내기 위함
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // (4) RestDcos 의존성
	//restdocs-dsl
	implementation 'io.github.lhs8701:restdocs-dslized-library:1.2.1'
	//jwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
	//security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation 'com.querydsl:querydsl-apt:5.0.0:jakarta'

	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor("jakarta.persistence:jakarta.persistence-api")
	annotationProcessor("jakarta.annotation:jakarta.annotation-api")
}


ext { // (5) 생성되는 스니펫들이 생성되는 디렉토리를 설정
	snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
	// (6) 스니펫을 snippetsDir로 생성하도록 test 태스크를 설정한다.
	//outputs.dir snippetsDir
	//useJUnitPlatform()
	enabled = false
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

tasks.named('asciidoctor') {
	configurations 'asciidoctorExt'
	inputs.dir snippetsDir
	dependsOn test
}

task copyDocument(type: Copy){
	dependsOn asciidoctor
	from file("build/docs/asciidoc/")
	into file("src/main/resources/static/docs")
}

bootJar {
	dependsOn copyDocument // bootJar 태스크가 실행될 때 먼저 asciidoctor 태스크가 실행되도록 하여 미리 html 파일을 생성한다.
	from ("${asciidoctor.outputDir}/html5")  {        // /html5를 사용하지 않는다!
		into 'src/main/resources/static/docs'    // /static/docs로 복사!
	}
}

build {
	dependsOn copyDocument
}
